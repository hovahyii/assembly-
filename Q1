
segment .data

msg1 db "Follow the instructions and input the three integer number (not more than 10) to find the smallest value", 0xA
len1 equ $- msg1

msg11 db "Enter first number  ", 0xA
len11 equ $- msg11

msg12 db 0xA,"Hi, You entered the first number as  ", 0xA
len12 equ $- msg12

msg21 db 0xA,"Enter second number   ", 0xA
len21 equ $- msg21

msg22 db 0xA,"You entered the second number as  ", 0xA
len22 equ $- msg22

msg31 db 0xA,"Enter third number   ", 0xA
len31 equ $- msg31

msg32 db 0xA,"You entered the third number as  ", 0xA
len32 equ $- msg32

msg41 db 0xA,"The smallest number is   ", 0xA
len41 equ $- msg41

segment .bss
num1 resb 2 
num2 resb 2
num3 resb 2
res resb 2 

section .text 

global _start ;must be declared for using gcc 
_start: ;tell linker entry point 

;displaying the first message
mov eax, 4 
mov ebx, 1
mov ecx, msg1
mov edx, len1
int 0x80 

;displaying the message to get first value
mov eax, 4 
mov ebx, 1
mov ecx, msg11 
mov edx, len11
int 0x80 

;getting the first value
mov eax, 3 
mov ebx, 0 
mov ecx, num1 
mov edx, 2 
int 0x80 

;displaying the message to get second value
mov eax, 4
mov ebx, 1 
mov ecx, msg21 
mov edx, len21 
int 0x80 

;getting the second value
mov eax, 3
mov ebx, 0 
mov ecx, num2 
mov edx, 2 
int 0x80 

;displaying the message to get third value
mov eax, 4
mov ebx, 1 
mov ecx, msg31 
mov edx, len31 
int 0x80 

;getting the third value
mov eax, 3
mov ebx, 0 
mov ecx, num3
mov edx, 2 
int 0x80 


;calculating the smallest number
mov ecx, [num1] 
cmp ecx, [num2] 
jb check_third_num 

mov ecx, [num2] 

check_third_num: 
cmp ecx, [num3]
jb _exit ;Jump short if below (ecx < num3)
mov ecx, [num3] 

_exit: 
mov [res],  ecx



;displaying the first output message
mov eax, 4
mov ebx, 1 
mov ecx, msg12
mov edx, len12
int 0x80 

; print the num1
mov eax, 4
mov ebx, 1 
mov ecx, num1 
mov edx, 1 
int 0x80


;displaying the second output message
mov eax, 4
mov ebx, 1 
mov ecx, msg22
mov edx, len22
int 0x80 

; print the num2
mov eax, 4
mov ebx, 1 
mov ecx, num2 
mov edx, 1 
int 0x80

;displaying the third output message
mov eax, 4
mov ebx, 1 
mov ecx, msg32
mov edx, len32
int 0x80 

; print the num3
mov eax, 4
mov ebx, 1 
mov ecx, num3 
mov edx, 1 
int 0x80

;displaying the result output message
mov eax, 4
mov ebx, 1 
mov ecx, msg41 
mov edx, len41 
int 0x80 

; print the res
mov eax, 4
mov ebx, 1 
mov ecx, res
mov edx, 1 
int 0x80

mov eax, 1
int 0x80